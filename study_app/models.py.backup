from django.db import models
from django.utils.translation import gettext_lazy as _

class Course(models.Model):
    COURSE_LEVELS = [
        ('bhakti_shastri', _('Bhakti Shastri')),
        ('bhakti_vaibhava', _('Bhakti Vaibhava')),
        ('bhakti_vedanta', _('Bhakti Vedanta')),
        ('bhakti_sarvabhauma', _('Bhakti Sarvabhauma')),
    ]
    
    name = models.CharField(max_length=100)
    level = models.CharField(max_length=20, choices=COURSE_LEVELS)
    description_en = models.TextField()
    description_es = models.TextField()
    order = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['order']
    
    def __str__(self):
        return self.name

class Book(models.Model):
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='books')
    title = models.CharField(max_length=200)
    english_url = models.URLField()
    spanish_url = models.URLField()
    cover_image = models.ImageField(upload_to='book_covers/', blank=True, null=True)
    order = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['order']
    
    def __str__(self):
        return self.title

class StudyMaterial(models.Model):
    MATERIAL_TYPES = [
        ('qa', _('Questions & Answers')),
        ('notes', _('Study Notes')),
        ('summary', _('Chapter Summary')),
        ('quiz', _('Quiz')),
        ('other', _('Other Material')),
    ]
    
    LANGUAGES = [
        ('en', _('English')),
        ('es', _('Spanish')),
        ('both', _('Both Languages')),
    ]
    
    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='materials')
    title = models.CharField(max_length=200)
    material_type = models.CharField(max_length=20, choices=MATERIAL_TYPES)
    language = models.CharField(max_length=10, choices=LANGUAGES)
    description = models.TextField(blank=True)
    
    # File fields for different languages
    english_file = models.FileField(upload_to='study_materials/english/', blank=True, null=True)
    spanish_file = models.FileField(upload_to='study_materials/spanish/', blank=True, null=True)
    bilingual_file = models.FileField(upload_to='study_materials/bilingual/', blank=True, null=True)
    
    # For simple Q&A that don't need files
    questions_json = models.JSONField(blank=True, null=True)  # Store Q&A as JSON
    
    verse_reference = models.CharField(max_length=50, blank=True)
    order = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['order', 'created_at']
    
    def __str__(self):
        return f"{self.title} - {self.get_material_type_display()}"

class QuestionAnswer(models.Model):
    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='qas')
    question_en = models.TextField()
    question_es = models.TextField()
    answer_en = models.TextField()
    answer_es = models.TextField()
    verse_reference = models.CharField(max_length=50)
    order = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['order']
    
    def __str__(self):
        return f"QA for {self.book.title} â€“ {self.verse_reference}"

class QAUpload(models.Model):
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    csv_file = models.FileField(upload_to='qa_uploads/')
    uploaded_at = models.DateTimeField(auto_now_add=True)
    processed = models.BooleanField(default=False)
    notes = models.TextField(blank=True)
    
    def __str__(self):
        return f"Upload for {self.book.title} - {self.uploaded_at}"

# Quiz System Models - Integrated with existing courses
class QuizModule(models.Model):
    """Modules for each course (e.g., Bhakti Shastri Modules 1-3)"""
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='quiz_modules')
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    chapters_range = models.CharField(max_length=100, help_text="e.g., 'Chapters 1-6' or 'Chapters 7-12'")
    order = models.IntegerField(default=0)
    
    class Meta:
        ordering = ['course', 'order']
    
    def __str__(self):
        return f"{self.course.name} - {self.name}"

class QuizQuestion(models.Model):
    """Quiz questions tied to specific books and modules"""
    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='quiz_questions')
    module = models.ForeignKey(QuizModule, on_delete=models.CASCADE, related_name='questions')
    chapter = models.CharField(max_length=10, help_text="e.g., 'Chapter 1' or 'Chapter 2'")
    question_text = models.TextField()
    correct_answers = models.TextField(help_text="Comma-separated list of acceptable answers based on Prabhupada's commentaries")
    prabhupada_commentary = models.TextField(help_text="Relevant commentary from Srila Prabhupada")
    additional_guidance = models.TextField(blank=True, help_text="Additional philosophical guidance")
    verse_reference = models.CharField(max_length=50, blank=True)
    order = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    
    def get_correct_answers_list(self):
        return [answer.strip().lower() for answer in self.correct_answers.split(',')]
    
    def check_answer(self, user_answer):
        user_answer_clean = user_answer.strip().lower()
        correct_answers = self.get_correct_answers_list()
        
        # Flexible matching for philosophical understanding
        for correct in correct_answers:
            if correct and (correct in user_answer_clean or user_answer_clean in correct):
                return True
        return False
    
    class Meta:
        ordering = ['module', 'chapter', 'order']
    
    def __str__(self):
        return f"{self.book.title} - {self.chapter}: {self.question_text[:50]}..."

class QuizAttempt(models.Model):
    """Track user quiz attempts"""
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    book = models.ForeignKey(Book, on_delete=models.CASCADE)
    module = models.ForeignKey(QuizModule, on_delete=models.CASCADE)
    answers = models.JSONField(default=dict)  # Stores {question_id: user_answer}
    score = models.IntegerField(default=0)
    total_questions = models.IntegerField(default=0)
    completed_at = models.DateTimeField(auto_now_add=True)
    
    def calculate_score(self):
        correct_count = 0
        for question_id, user_answer in self.answers.items():
            try:
                question = QuizQuestion.objects.get(id=question_id)
                if question.check_answer(user_answer):
                    correct_count += 1
            except QuizQuestion.DoesNotExist:
                continue
        
        self.score = correct_count
        self.total_questions = len(self.answers)
        self.save()
        return correct_count
    
    def get_feedback(self):
        """Provide philosophical feedback based on score"""
        percentage = (self.score / self.total_questions) * 100 if self.total_questions > 0 else 0
        
        if percentage >= 90:
            return "Excellent! Your understanding is very much in line with Srila Prabhupada's teachings. Hare Krishna!"
        elif percentage >= 70:
            return "Very good! You have a good grasp of the philosophy. Continue studying Srila Prabhupada's books."
        elif percentage >= 50:
            return "Good effort! There's always more to learn in Krishna consciousness. Keep reading and chanting."
        else:
            return "Thank you for attempting! Remember, in Krishna consciousness there are no failures, only opportunities to learn. Please read Srila Prabhupada's commentaries more carefully."
    
    class Meta:
        ordering = ['-completed_at']
    
    def __str__(self):
        return f"Quiz Attempt - {self.book.title} - {self.module.name} - Score: {self.score}/{self.total_questions}"
